<% set_title "Plugin Configuration < Hub" %>

<% content_for :javascripts do %>  

<!-- jsHub dist file -->
<%= javascript_include_tag "/js/src/modules/yui/yui-base-debug.js" %>
<%= javascript_include_tag "/js/src/modules/hub/hub-debug.js" %>
<%= javascript_include_tag "/js/src/modules/logger/logger-debug.js" %>
<%= javascript_include_tag "/js/src/modules/jshub/jshub-debug.js" %>
<%= javascript_include_tag "/js/src/modules/jquery/jquery-debug.js" %>
<%= javascript_include_tag "/js/src/modules/microformats/hpage-capture-debug.js" %>

<script type="text/javascript">
  YUI().use('jshub', 'microformats', 'hpage-capture', function(Y, result) {
    if (!result.success) {
        Y.log('Load failure: ' + result.msg, 'warn', 'jsHub');
    } else {
        Y.log('Loaded: jsHub', 'info', 'jsHub');
    }
  });
</script>

<% end %>

<% content_for :intro do %>
<p>Tests for the hub's core event functionality.</p>
<% end %>

<script language="javascript" type="text/javascript">
(function() {

  /* 
   * Check the browser environment for required JS libraries and other 
   * supporting functionality to avoid false test failure results due to 
   * mis-configuration, etc
   */
  suite.add(new Y.Test.Case({ 
    name : "Environment check",
  
    "test required test dependencies" : function () {
      Y.Assert.isNotUndefined(window.YUI, "The YUI library is required");
      Y.Assert.isNotUndefined(window.jsHub, "The jsHub hub is required");
      Y.Assert.isNotUndefined(window.jQuery, "The jQuery library is required");
    },
  
    "test jsHub API dependencies" : function () {
      Y.Assert.isFunction(jsHub.bind, "jsHub.bind() is not a Function");
      Y.Assert.isFunction(jsHub.trigger, "jsHub.trigger() is not a Function");
      Y.Assert.isFunction(jsHub.safe, "jsHub.safe() is not a Function");
    }
  }));
  
  // tests for jsHub.getPluginInfo(), which reads the metadata about installed
  // plugins for the Inspector
  suite.add(new Y.Test.Case({
    name: "jsHub plugins installed",
    
    "test plugins are read correctly": function() {
      Y.Assert.isFunction(jsHub.getPluginInfo, "jsHub.getPluginInfo() is not a Function");
      var plugins = jsHub.getPluginInfo();
	  Y.Assert.isNotNull(plugins, "Plugins array should never be empty");
      Y.Assert.areEqual(1, plugins.length, "hPage plugin registered at start of test");
	  var metadata = plugins[0];
	  Y.Assert.areEqual('hPage Microformat Parser Plugin', metadata.name);
	  Y.Assert.areEqual('microformat', metadata.type);
    },
	
    "test plugin metadata cannot be modified": function() {
      Y.Assert.isFunction(jsHub.getPluginInfo, "jsHub.getPluginInfo() is not a Function");
      var plugins = jsHub.getPluginInfo();
      var metadata = plugins[0];
      Y.Assert.areEqual('hPage Microformat Parser Plugin', metadata.name);
	  metadata.name = 'tampered data';
	  metadata = jsHub.getPluginInfo()[0];
      Y.Assert.areEqual('hPage Microformat Parser Plugin', metadata.name, 
	    "Plugin metadata should not be changed from outside");
    }	
  }));
  
  // tests for jsHub.getPluginInfo(), which reads the metadata about installed
  // plugins for the Inspector
  suite.add(new Y.Test.Case({
    name: "jsHub configuration",
    
    "test configuration value can be set": function() {
      Y.Assert.isFunction(jsHub.configure, "jsHub.configure() is not a Function");
	  jsHub.configure("test", true);
	  Y.Assert.areSame(true, jsHub.configure("test"), "Cannot retrieve boolean value");
	  jsHub.configure("test", "one");
	  Y.Assert.areSame("one", jsHub.configure("test"), "Cannot retrieve string value");
	  jsHub.configure("test", 1);
	  Y.Assert.areSame(1, jsHub.configure("test"), "Cannot retrieve integer value");
    },
	
    "test namespaced configuration value can be set": function() {
      Y.Assert.isFunction(jsHub.configure, "jsHub.configure() is not a Function");
	  var key = "logger.level";
	  jsHub.configure(key, true);
	  Y.Assert.areSame(true, jsHub.configure(key), "Cannot retrieve boolean value");
	  jsHub.configure(key, "one");
	  Y.Assert.areSame("one", jsHub.configure(key), "Cannot retrieve string value");
	  jsHub.configure(key, 1);
	  Y.Assert.areSame(1, jsHub.configure(key), "Cannot retrieve integer value");
	  // config should now be { "level" : 1 };
	  var config = jsHub.configure("logger");
	  Y.Assert.isObject(config, "Namespaced config should be an object");
	  Y.ObjectAssert.hasKey("level", config, "Level property not present in config");
	  Y.Assert.areSame(1, config.level, "Level property value is not correct"); 
    },
	
    "test configuration value can be removed": function() {
      Y.Assert.isFunction(jsHub.configure, "jsHub.configure() is not a Function");
	  var key = "logger.level";
	  jsHub.configure(key, "one");
	  Y.Assert.areSame("one", jsHub.configure(key), "Cannot retrieve string value");
	  jsHub.configure(key, null);
	  Y.Assert.isUndefined(jsHub.configure(key), "Setting null should remove value");
	  // config should now be { };
	  var config = jsHub.configure("logger");
	  Y.Assert.isObject(config, "Namespaced config should be an object");
	  Y.Assert.isFalse(config.hasOwnProperty("length"), "Config should be empty");
    }	
		
  }));
})();

  
</script> 