<% set_title "Image Transport < Data Transport" %>

<% content_for :javascripts do %>  

<!-- jsHub dist file -->
<%= javascript_include_tag :'jshub-min' %>

<script type="text/javascript">
  YUI().use('jshub', function(Y, result) {
    if (!result.success) {
        Y.log('Load failure: ' + result.msg, 'warn', 'jsHub');
    } else {
        Y.log('Loaded: jsHub', 'info', 'jsHub');
    }
  });
</script>

<%= javascript_include_tag "/js/src/data-transport/sample-get-plugin.js" %>
<% end %>

<% content_for :intro do %>
<p>
  The <a href=".">image transport test suite</a> tests <strong>data output from the tag
  to servers</strong> using the HTTP GET method.
</p>
<p>
  This page tests the sample GET plugin provided as a starting point for vendor developers.
</p>
<% end %>

<script language="javascript" type="text/javascript">
(function() {
	
  /* 
   * Check the browser environment for required JS libraries and other 
   * supporting functionality to avoid false test failure results due to 
   * mis-configuration, etc
   */
  suite.add(new Y.Test.Case({ 
    name : "Environment check",
  
    "test required test dependencies" : function () {
      Y.Assert.isNotUndefined(window.YUI, "The YUI library is required");
      Y.Assert.isNotUndefined(window.jsHub, "The jsHub hub is required");
    },
  
    "test jsHub API dependencies" : function () {
      Y.Assert.isFunction(jsHub.bind, "jsHub.bind() is not a Function");
      Y.Assert.isFunction(jsHub.trigger, "jsHub.trigger() is not a Function");
      Y.Assert.isFunction(jsHub.safe, "jsHub.safe() is not a Function");
    }
  }));
  
  /* 
   * Create a mock for the API function
   */
  var MockAPI = function() {
    var self = this;
    self.count = 0;
    self.dispatchViaImage = function(url, data) {
      self.count++;
      self.url = url;
      self.data = data;
    };
    
    jsHub.dispatchViaImage = self.dispatchViaImage;
  };
  
  // tests for hub events
  suite.add(new Y.Test.Case({
    name: "Event binding",
    
    "test page views are dispatched": function() {
      var mock = new MockAPI();
      jsHub.trigger("page-view", {});
      Y.Assert.areEqual(1, mock.count, "dispatchViaImage() should be called once");
    },
    
    "test page name is captured": function() {
      var mock = new MockAPI();
      jsHub.trigger("page-view", {
        name: "Homepage"
      });
      Y.Assert.areEqual(1, mock.count, "dispatchViaImage() should be called once");
      var expectedData = {
        sender: "Sample HTTP GET transport plugin v0.1",
        pagename: "Homepage"
      };
      Y.ObjectAssert.areEqual(expectedData, mock.data, "data is not correct");
    },
    
    "test page name fails over to url": function() {
      var mock = new MockAPI();
      jsHub.trigger("page-view", {
	  	// 'name' not specified 
        url: "http://www.example.com/index.html"
      });
      Y.Assert.areEqual(1, mock.count, "dispatchViaImage() should be called once");
      var expectedData = {
        sender: "Sample HTTP GET transport plugin v0.1",
        pagename: "http://www.example.com/index.html"
      };
      Y.ObjectAssert.areEqual(expectedData, mock.data, "data is not correct");
    },
    
    "test page name fails over to nothing": function() {
      var mock = new MockAPI();
      jsHub.trigger("page-view", {
	  	// 'name' and 'url' not specified 
      });
      Y.Assert.areEqual(1, mock.count, "dispatchViaImage() should be called once");
      var expectedData = {
        sender: "Sample HTTP GET transport plugin v0.1",
        pagename: "not defined"
      };
      Y.ObjectAssert.areEqual(expectedData, mock.data, "data is not correct");
    }
		
  }));
})();

  
</script> 
