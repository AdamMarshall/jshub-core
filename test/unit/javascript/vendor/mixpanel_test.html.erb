<% set_title "Mixpanel < Data transport" %>

<% content_for :javascripts do %>  

<!-- jsHub tag files -->
<%= javascript_include_tag "/../phploader/combo.php?jshub_1.0.0/build/jshub/jshub-min.js&jshub_1.0.0/build/microformats/microformats-min.js" %>

<script type="text/javascript">
  YUI().use('jshub', 'microformats', function(Y, result) {
    if (!result.success) {
        Y.log('Load failure: ' + result.msg, 'warn', 'jsHub');
    } else {
        Y.log('Loaded: jsHub', 'info', 'jsHub');
    }
  });
</script>

<%= javascript_include_tag "/js/src/data-capture/hPage-plugin.js" %>
<%= javascript_include_tag "/js/src/data-transport/mixpanel-get-plugin.js" %>
<% end %>

<% content_for :intro do %>
<p>
  This file tests <strong><a href="http://mixpanel.com/api/docs/" title="Mixpanel">Mixpanel data logging plugin</a> functionality to a server via a GET image request</strong>.
</p>
<p>
  This page tests the logic for extracting values from the html of the page, and clicking a button.
</p>
<% end %>

<script language="javascript" type="text/javascript">
  /* 
   * Create a mock for the API function
   */
  var MockAPI = function() {
    var self = this;
    self.count = 0;
    self.dispatchViaImage = function(url, data) {
      self.count++;
      self.url = url;
      self.data = data;
    };    
    jsHub.dispatchViaImage = self.dispatchViaImage;
  };
</script>
<script language="javascript" type="text/javascript">
  /* 
   * Check the browser environment for required JS libraries and other
   * supporting functionality to avoid false test failure results due to
   * mis-configuration, etc
   */
  suite.add(new Y.Test.Case({
    name: "Environment check",
    
    "test required test dependencies": function() {
      Y.Assert.isNotUndefined(window.jsHub, "The jsHub hub is required");
      Y.Assert.isNotUndefined(window.jQuery, "The jQuery library is required");
      Y.Assert.isFunction($('html').getMicroformatPropertyValue, "$.getMicroformatPropertyValue() is not a function");
    },
    
    "test jsHub API dependencies": function() {
      Y.Assert.isFunction(jsHub.bind, "jsHub.bind() is not a Function");
      Y.Assert.isFunction(jsHub.trigger, "jsHub.trigger() is not a Function");
      Y.Assert.isFunction(jsHub.safe, "jsHub.safe() is not a Function");
    }
  }));
</script>  

<!-- Any HTML you may require for your tests to work properly -->
<div id="example1">
</div>
<script language="javascript" type="text/javascript">
  // tests for hub events
  suite.add(new Y.Test.Case({
    name: "Data dispatch",
    
    "test interaction events are dispatched": function() {
      var mock = new MockAPI();
      jsHub.trigger("interaction", {});
      Y.Assert.areEqual(1, mock.count, "dispatchViaImage() should be called once");
    },

    "test interaction event properties is converted to Mixpanel API format": function() {
      var mock = new MockAPI();
      jsHub.trigger('interaction', {"event": 'test-interaction-event', "property1" : "value1", "property2" : "value2"});  
      var expectedData = {
        _: 123456789,
        data: "eyJwcm9wZXJ0aWVzIjogeyJwcm9wZXJ0eTEiOiAidmFsdWUxIiwicHJvcGVydHkyIjogInZhbHVlMiIsInRva2VuIjogIjI5NWViNTRlNThhZDc5MGI0ZjJhM2YzMjg4NDk5NTkxIn0sImV2ZW50IjogInRlc3QtaW50ZXJhY3Rpb24tZXZlbnQifQ==",
        img: 1,
        ip: 1
      };
      Y.Assert.isNumber(expectedData._, mock.data._, "Timestamp is not a number");
      Y.Assert.areEqual(expectedData._.length, mock.data._.length, "Timestamp is not the same length");
      Y.Assert.areEqual(expectedData.data, mock.data.data, "Value is not Base64 encoded correctly");
      Y.Assert.areEqual(expectedData.img, mock.data.img, "Value is not the same");
      Y.Assert.isNumber(expectedData.img, mock.data.img, "Value is not a number");
      Y.Assert.areEqual(expectedData.ip, mock.data.ip, "Value is not the same");
      Y.Assert.isNumber(expectedData.img, mock.data.img, "Value is not a number");      
    }

  }));    
</script>

