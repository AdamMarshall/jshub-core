<% set_title "Mixpanel < Data transport" %>

<% content_for :javascripts do %>  
  <%= javascript_include_tag "/js/src/data-capture/hPage-plugin.js" %>
  <%= javascript_include_tag "/js/src/data-transport/mixpanel-get-plugin.js" %>

  <script language="javascript" type="text/javascript">
    /* 
     * Create a mock for the API function
     */
    var MockAPI = function() {
      var self = this;
      self.count = 0;
      self.dispatchViaImage = function(url, data) {
        self.count++;
        self.url = url;
        self.data = data;
      };    
      jsHub.dispatchViaImage = self.dispatchViaImage;
    };
  </script>  
<% end %>

<% content_for :intro do %>
<p>
  This file tests <strong><a href="http://mixpanel.com/api/docs/" title="Mixpanel">Mixpanel 
  data logging plugin</a> functionality to a server via a GET image request</strong>.
</p>
<p>
  This plugin should capture page view events, and ignore other event types.
</p>
<p>
  See the <%= link_to "Mixpanel API", "http://mixpanel.com/api/docs/specification/" %>
  for documentation on the expected data format.
</p>
<% end %>


<script language="javascript" type="text/javascript">
  /* 
   * Check the browser environment for required JS libraries and other
   * supporting functionality to avoid false test failure results due to
   * mis-configuration, etc
   */
  suite.add(new Y.Test.Case({
    name: "Environment check",
    
    "test required test dependencies": function() {
      Y.Assert.isNotUndefined(window.jQuery, "The jQuery library is required");
      Y.Assert.isNotUndefined(window.jsHub, "The jsHub hub is required");
    },
    
    "test jsHub API dependencies": function() {
      Y.Assert.isFunction(jsHub.bind, "jsHub.bind() is not a Function");
      Y.Assert.isFunction(jsHub.trigger, "jsHub.trigger() is not a Function");
      Y.Assert.isFunction(jsHub.safe, "jsHub.safe() is not a Function");
    }
  }));
</script>  

<!-- Any HTML you may require for your tests to work properly -->
<div id="example1">
</div>
<script language="javascript" type="text/javascript">
  // tests for hub events
  suite.add(new Y.Test.Case({
    name: "Data dispatch",
    
    "test page view events are dispatched": function() {
      var mock = new MockAPI();
      jsHub.trigger("page-view", {});
      Y.Assert.areEqual(1, mock.count, "dispatchViaImage() should be called once");
    },

    "test event properties are converted to Mixpanel API format": function() {
      var mock = new MockAPI();
      jsHub.trigger("page-view", {"name" : "homepage"});  
      var expectedData = {
        data: "eyJwcm9wZXJ0aWVzIjogeyJwcm9wZXJ0eTEiOiAidmFsdWUxIiwicHJvcGVydHkyIjogInZhbHVlMiIsInRva2VuIjogIjI5NWViNTRlNThhZDc5MGI0ZjJhM2YzMjg4NDk5NTkxIn0sImV2ZW50IjogInRlc3QtaW50ZXJhY3Rpb24tZXZlbnQifQ==",
        img: 1,
        ip: 1
      };
	  console.log("Data: "+Y.JSON.stringify(mock.data.data));
      Y.Assert.areEqual(expectedData.data, mock.data.data, "Value is not Base64 encoded correctly");
      Y.Assert.areEqual(expectedData.img, mock.data.img, "Value is not the same");
      Y.Assert.areEqual(expectedData.ip, mock.data.ip, "Value is not the same");
    }

  }));    
</script>

